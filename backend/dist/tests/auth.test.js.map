{"version":3,"sources":["../../src/tests/auth.test.ts"],"sourcesContent":["import bcrypt from 'bcrypt';\r\nimport mongoose from 'mongoose';\r\nimport request from 'supertest';\r\nimport App from '@/app';\r\nimport { CreateUserDto } from '@dtos/users.dto';\r\nimport AuthRoute from '@routes/auth.route';\r\n\r\nafterAll(async () => {\r\n  await new Promise<void>(resolve => setTimeout(() => resolve(), 500));\r\n});\r\n\r\ndescribe('Testing Auth', () => {\r\n  describe('[POST] /signup', () => {\r\n    it('response should have the Create userData', async () => {\r\n      const userData: CreateUserDto = {\r\n        email: 'test@email.com',\r\n        password: 'q1w2e3r4!'\r\n      };\r\n\r\n      const authRoute = new AuthRoute();\r\n      const users = authRoute.authController.authService.users;\r\n\r\n      users.findOne = jest.fn().mockReturnValue(null);\r\n      users.create = jest.fn().mockReturnValue({\r\n        _id: '60706478aad6c9ad19a31c84',\r\n        email: userData.email,\r\n        password: await bcrypt.hash(userData.password, 10)\r\n      });\r\n\r\n      (mongoose as any).connect = jest.fn();\r\n      const app = new App([authRoute]);\r\n      return request(app.getServer()).post(`${authRoute.path}signup`).send(userData);\r\n    });\r\n  });\r\n\r\n  describe('[POST] /login', () => {\r\n    it('response should have the Set-Cookie header with the Authorization token', async () => {\r\n      const userData: CreateUserDto = {\r\n        email: 'test@email.com',\r\n        password: 'q1w2e3r4!'\r\n      };\r\n\r\n      const authRoute = new AuthRoute();\r\n      const users = authRoute.authController.authService.users;\r\n\r\n      users.findOne = jest.fn().mockReturnValue({\r\n        _id: '60706478aad6c9ad19a31c84',\r\n        email: userData.email,\r\n        password: await bcrypt.hash(userData.password, 10)\r\n      });\r\n\r\n      (mongoose as any).connect = jest.fn();\r\n      const app = new App([authRoute]);\r\n      return request(app.getServer())\r\n        .post(`${authRoute.path}login`)\r\n        .send(userData)\r\n        .expect('Set-Cookie', /^Authorization=.+/);\r\n    });\r\n  });\r\n\r\n  // describe('[POST] /logout', () => {\r\n  //   it('logout Set-Cookie Authorization=; Max-age=0', async () => {\r\n  //     const userData: User = {\r\n  //       _id: '60706478aad6c9ad19a31c84',\r\n  //       email: 'test@email.com',\r\n  //       password: await bcrypt.hash('q1w2e3r4!', 10),\r\n  //     };\r\n\r\n  //     const authRoute = new AuthRoute();\r\n  //     const users = authRoute.authController.authService.users;\r\n\r\n  //     users.findOne = jest.fn().mockReturnValue(userData);\r\n\r\n  //     (mongoose as any).connect = jest.fn();\r\n  //     const app = new App([authRoute]);\r\n  //     return request(app.getServer())\r\n  //       .post(`${authRoute.path}logout`)\r\n  //       .send(userData)\r\n  //       .set('Set-Cookie', 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ')\r\n  //       .expect('Set-Cookie', /^Authorization=\\; Max-age=0/);\r\n  //   });\r\n  // });\r\n});\r\n"],"names":["bcrypt","mongoose","request","App","AuthRoute","afterAll","Promise","resolve","setTimeout","describe","it","userData","authRoute","users","app","email","password","authController","authService","findOne","jest","fn","mockReturnValue","_id","hash","create","connect","getServer","post","path","send","expect"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,YAAY,SAAS;AAC5B,OAAOC,cAAc,WAAW;AAChC,OAAOC,aAAa,YAAY;AAChC,OAAOC,SAAS,QAAQ;AAExB,OAAOC,eAAe,qBAAqB;AAE3CC,uBAAS,kBAAA,WAAY;;;;gBACnB;;oBAAM,IAAIC,QAAcC,SAAAA;+BAAWC,WAAW;mCAAMD;2BAAW;;;;gBAA/D;;;;;;AACF;AAEAE,SAAS,gBAAgB,WAAM;IAC7BA,SAAS,kBAAkB,WAAM;QAC/BC,GAAG,0DAA4C,kBAAA,WAAY;gBACnDC,UAKAC,WACAC,oBAUAC;;;;wBAhBAH,WAA0B;4BAC9BI,OAAO;4BACPC,UAAU;wBACZ;wBAEMJ,YAAY,IAAIR;wBAChBS,QAAQD,UAAUK,cAAc,CAACC,WAAW,CAACL,KAAK;wBAExDA,MAAMM,OAAO,GAAGC,KAAKC,EAAE,GAAGC,eAAe,CAAC,IAAI;6BAC/BF,KAAAA,KAAKC,EAAE,IAAGC,eAAe;;4BACtCC,KAAK;4BACLR,OAAOJ,SAASI,KAAK;;wBACX;;4BAAMf,OAAOwB,IAAI,CAACb,SAASK,QAAQ,EAAE;;;wBAHjDH,MAAMY,MAAM,GAAGL,GAAAA;kCAGbJ,WAAU;;wBAGXf,SAAiByB,OAAO,GAAGN,KAAKC,EAAE;wBAC7BP,MAAM,IAAIX;4BAAKS;;wBACrB;;4BAAOV,QAAQY,IAAIa,SAAS,IAAIC,IAAI,CAAC,AAAC,GAAiB,OAAfhB,UAAUiB,IAAI,EAAC,WAASC,IAAI,CAACnB;;;;QACvE;IACF;IAEAF,SAAS,iBAAiB,WAAM;QAC9BC,GAAG,yFAA2E,kBAAA,WAAY;gBAClFC,UAKAC,WACAC,oBASAC;;;;wBAfAH,WAA0B;4BAC9BI,OAAO;4BACPC,UAAU;wBACZ;wBAEMJ,YAAY,IAAIR;wBAChBS,QAAQD,UAAUK,cAAc,CAACC,WAAW,CAACL,KAAK;6BAExCO,KAAAA,KAAKC,EAAE,IAAGC,eAAe;;4BACvCC,KAAK;4BACLR,OAAOJ,SAASI,KAAK;;wBACX;;4BAAMf,OAAOwB,IAAI,CAACb,SAASK,QAAQ,EAAE;;;wBAHjDH,MAAMM,OAAO,GAAGC,GAAAA;kCAGdJ,WAAU;;wBAGXf,SAAiByB,OAAO,GAAGN,KAAKC,EAAE;wBAC7BP,MAAM,IAAIX;4BAAKS;;wBACrB;;4BAAOV,QAAQY,IAAIa,SAAS,IACzBC,IAAI,CAAC,AAAC,GAAiB,OAAfhB,UAAUiB,IAAI,EAAC,UACvBC,IAAI,CAACnB,UACLoB,MAAM,CAAC,cAAc;;;;QAC1B;IACF;AAEA,qCAAqC;AACrC,oEAAoE;AACpE,+BAA+B;AAC/B,yCAAyC;AACzC,iCAAiC;AACjC,sDAAsD;AACtD,SAAS;AAET,yCAAyC;AACzC,gEAAgE;AAEhE,2DAA2D;AAE3D,6CAA6C;AAC7C,wCAAwC;AACxC,sCAAsC;AACtC,yCAAyC;AACzC,wBAAwB;AACxB,kEAAkE;AAClE,8DAA8D;AAC9D,QAAQ;AACR,MAAM;AACR"}