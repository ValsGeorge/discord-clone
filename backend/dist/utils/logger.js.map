{"version":3,"sources":["../../src/utils/logger.ts"],"sourcesContent":["import { existsSync, mkdirSync } from 'fs';\r\nimport { join } from 'path';\r\nimport winston from 'winston';\r\nimport winstonDaily from 'winston-daily-rotate-file';\r\nimport { LOG_DIR } from '@config';\r\n\r\n// logs dir\r\nconst logDir: string = join(__dirname, LOG_DIR);\r\n\r\nif (!existsSync(logDir)) {\r\n  mkdirSync(logDir);\r\n}\r\n\r\n// Define log format\r\nconst logFormat = winston.format.printf(({ timestamp, level, message }) => `${timestamp} ${level}: ${message}`);\r\n\r\n/*\r\n * Log Level\r\n * error: 0, warn: 1, info: 2, http: 3, verbose: 4, debug: 5, silly: 6\r\n */\r\nconst logger = winston.createLogger({\r\n  format: winston.format.combine(\r\n    winston.format.timestamp({\r\n      format: 'YYYY-MM-DD HH:mm:ss'\r\n    }),\r\n    logFormat\r\n  ),\r\n  transports: [\r\n    // debug log setting\r\n    new winstonDaily({\r\n      level: 'debug',\r\n      datePattern: 'YYYY-MM-DD',\r\n      dirname: logDir + '/debug', // log file /logs/debug/*.log in save\r\n      filename: `%DATE%.log`,\r\n      maxFiles: 30, // 30 Days saved\r\n      json: false,\r\n      zippedArchive: true\r\n    }),\r\n    // error log setting\r\n    new winstonDaily({\r\n      level: 'error',\r\n      datePattern: 'YYYY-MM-DD',\r\n      dirname: logDir + '/error', // log file /logs/error/*.log in save\r\n      filename: `%DATE%.log`,\r\n      maxFiles: 30, // 30 Days saved\r\n      handleExceptions: true,\r\n      json: false,\r\n      zippedArchive: true\r\n    })\r\n  ]\r\n});\r\n\r\nlogger.add(\r\n  new winston.transports.Console({\r\n    format: winston.format.combine(winston.format.splat(), winston.format.colorize())\r\n  })\r\n);\r\n\r\nconst stream = {\r\n  write: (message: string) => {\r\n    logger.info(message.substring(0, message.lastIndexOf('\\n')));\r\n  }\r\n};\r\n\r\nexport { logger, stream };\r\n"],"names":["existsSync","mkdirSync","join","winston","winstonDaily","LOG_DIR","logDir","__dirname","logFormat","format","printf","timestamp","level","message","logger","createLogger","combine","transports","datePattern","dirname","filename","maxFiles","json","zippedArchive","handleExceptions","add","Console","splat","colorize","stream","write","info","substring","lastIndexOf"],"mappings":"AAAA,SAASA,UAAU,EAAEC,SAAS,QAAQ,KAAK;AAC3C,SAASC,IAAI,QAAQ,OAAO;AAC5B,OAAOC,aAAa,UAAU;AAC9B,OAAOC,kBAAkB,4BAA4B;AACrD,SAASC,OAAO,QAAQ,UAAU;AAElC,WAAW;AACX,IAAMC,SAAiBJ,KAAKK,WAAWF;AAEvC,IAAI,CAACL,WAAWM,SAAS;IACvBL,UAAUK;AACZ,CAAC;AAED,oBAAoB;AACpB,IAAME,YAAYL,QAAQM,MAAM,CAACC,MAAM,CAAC;QAAGC,kBAAAA,WAAWC,cAAAA,OAAOC,gBAAAA;WAAc,AAAC,GAAeD,OAAbD,WAAU,KAAaE,OAAVD,OAAM,MAAY,OAARC;;AAErG;;;CAGC,GACD,IAAMC,SAASX,QAAQY,YAAY,CAAC;IAClCN,QAAQN,QAAQM,MAAM,CAACO,OAAO,CAC5Bb,QAAQM,MAAM,CAACE,SAAS,CAAC;QACvBF,QAAQ;IACV,IACAD;IAEFS,YAAY;QACV,oBAAoB;QACpB,IAAIb,aAAa;YACfQ,OAAO;YACPM,aAAa;YACbC,SAASb,SAAS;YAClBc,UAAW;YACXC,UAAU;YACVC,MAAM,KAAK;YACXC,eAAe,IAAI;QACrB;QACA,oBAAoB;QACpB,IAAInB,aAAa;YACfQ,OAAO;YACPM,aAAa;YACbC,SAASb,SAAS;YAClBc,UAAW;YACXC,UAAU;YACVG,kBAAkB,IAAI;YACtBF,MAAM,KAAK;YACXC,eAAe,IAAI;QACrB;KACD;AACH;AAEAT,OAAOW,GAAG,CACR,IAAItB,QAAQc,UAAU,CAACS,OAAO,CAAC;IAC7BjB,QAAQN,QAAQM,MAAM,CAACO,OAAO,CAACb,QAAQM,MAAM,CAACkB,KAAK,IAAIxB,QAAQM,MAAM,CAACmB,QAAQ;AAChF;AAGF,IAAMC,SAAS;IACbC,OAAO,SAACjB,SAAoB;QAC1BC,OAAOiB,IAAI,CAAClB,QAAQmB,SAAS,CAAC,GAAGnB,QAAQoB,WAAW,CAAC;IACvD;AACF;AAEA,SAASnB,MAAM,EAAEe,MAAM,GAAG"}