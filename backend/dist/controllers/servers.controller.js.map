{"version":3,"sources":["../../src/controllers/servers.controller.ts"],"sourcesContent":["import { NextFunction, Request, Response } from 'express';\r\nimport { CreateServerDto } from '@dtos/servers.dto';\r\nimport { Server } from '@interfaces/server.interface';\r\nimport ServerService from 'services/server.service';\r\n\r\nclass ServerController {\r\n    public serverService = new ServerService();\r\n\r\n    public getServers = async (\r\n        req: Request,\r\n        res: Response,\r\n        next: NextFunction\r\n    ) => {\r\n        try {\r\n            const findAllServersData: Server[] =\r\n                await this.serverService.findAllServer();\r\n\r\n            res.status(200).json({\r\n                data: findAllServersData,\r\n                message: 'findAll',\r\n            });\r\n        } catch (error) {\r\n            next(error);\r\n        }\r\n    };\r\n\r\n    public getServerById = async (\r\n        req: Request,\r\n        res: Response,\r\n        next: NextFunction\r\n    ) => {\r\n        try {\r\n            const serverId: string = req.params.id;\r\n            const findOneServerData: Server =\r\n                await this.serverService.findServerById(serverId);\r\n\r\n            res.status(200).json({\r\n                data: findOneServerData,\r\n                message: 'findOne',\r\n            });\r\n        } catch (error) {\r\n            next(error);\r\n        }\r\n    };\r\n\r\n    public createServer = async (\r\n        req: Request,\r\n        res: Response,\r\n        next: NextFunction\r\n    ) => {\r\n        try {\r\n            const serverData: CreateServerDto = req.body;\r\n            const createServerData: Server =\r\n                await this.serverService.createServer(serverData);\r\n\r\n            res.status(201).json({\r\n                data: createServerData,\r\n                message: 'created',\r\n            });\r\n        } catch (error) {\r\n            next(error);\r\n        }\r\n    };\r\n\r\n    public updateServer = async (\r\n        req: Request,\r\n        res: Response,\r\n        next: NextFunction\r\n    ) => {\r\n        try {\r\n            const serverId: string = req.params.id;\r\n            const serverData: CreateServerDto = req.body;\r\n            const updateServerData: Server =\r\n                await this.serverService.updateServer(serverId, serverData);\r\n\r\n            res.status(200).json({\r\n                data: updateServerData,\r\n                message: 'updated',\r\n            });\r\n        } catch (error) {\r\n            next(error);\r\n        }\r\n    };\r\n\r\n    public deleteServer = async (\r\n        req: Request,\r\n        res: Response,\r\n        next: NextFunction\r\n    ) => {\r\n        try {\r\n            const serverId: string = req.params.id;\r\n            const deleteServerData: Server =\r\n                await this.serverService.deleteServer(serverId);\r\n\r\n            res.status(200).json({\r\n                data: deleteServerData,\r\n                message: 'deleted',\r\n            });\r\n        } catch (error) {\r\n            next(error);\r\n        }\r\n    };\r\n}\r\n\r\nexport default ServerController;\r\n"],"names":["ServerService","ServerController","serverService","getServers","req","res","next","findAllServersData","error","findAllServer","status","json","data","message","getServerById","serverId","findOneServerData","params","id","findServerById","createServer","serverData","createServerData","body","updateServer","updateServerData","deleteServer","deleteServerData"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA,OAAOA,mBAAmB,0BAA0B;AAEpD,IAAA,AAAMC,mBAAN,SAAMA;;0BAAAA;SACKC,gBAAgB,IAAIF;;SAEpBG;mBAAa,kBAAA,SAChBC,KACAC,KACAC,MACC;gBAESC,oBAODC;;;;;;;;;;wBAND;;4BAAM,MAAKN,aAAa,CAACO,aAAa;;;wBADpCF,qBACF;wBAEJF,IAAIK,MAAM,CAAC,KAAKC,IAAI,CAAC;4BACjBC,MAAML;4BACNM,SAAS;wBACb;;;;;;wBACKL;wBACLF,KAAKE;;;;;;;;;;;QAEb;wBAfIJ,KACAC,KACAC;;;;;SAeGQ;mBAAgB,kBAAA,SACnBV,KACAC,KACAC,MACC;gBAESS,UACAC,mBAODR;;;;;;;;;;wBARCO,WAAmBX,IAAIa,MAAM,CAACC,EAAE;wBAElC;;4BAAM,OAAKhB,aAAa,CAACiB,cAAc,CAACJ;;;wBADtCC,oBACF;wBAEJX,IAAIK,MAAM,CAAC,KAAKC,IAAI,CAAC;4BACjBC,MAAMI;4BACNH,SAAS;wBACb;;;;;;wBACKL;wBACLF,KAAKE;;;;;;;;;;;QAEb;wBAhBIJ,KACAC,KACAC;;;;;SAgBGc;mBAAe,kBAAA,SAClBhB,KACAC,KACAC,MACC;gBAESe,YACAC,kBAODd;;;;;;;;;;wBARCa,aAA8BjB,IAAImB,IAAI;wBAExC;;4BAAM,OAAKrB,aAAa,CAACkB,YAAY,CAACC;;;wBADpCC,mBACF;wBAEJjB,IAAIK,MAAM,CAAC,KAAKC,IAAI,CAAC;4BACjBC,MAAMU;4BACNT,SAAS;wBACb;;;;;;wBACKL;wBACLF,KAAKE;;;;;;;;;;;QAEb;wBAhBIJ,KACAC,KACAC;;;;;SAgBGkB;mBAAe,kBAAA,SAClBpB,KACAC,KACAC,MACC;gBAESS,UACAM,YACAI,kBAODjB;;;;;;;;;;wBATCO,WAAmBX,IAAIa,MAAM,CAACC,EAAE;wBAChCG,aAA8BjB,IAAImB,IAAI;wBAExC;;4BAAM,OAAKrB,aAAa,CAACsB,YAAY,CAACT,UAAUM;;;wBAD9CI,mBACF;wBAEJpB,IAAIK,MAAM,CAAC,KAAKC,IAAI,CAAC;4BACjBC,MAAMa;4BACNZ,SAAS;wBACb;;;;;;wBACKL;wBACLF,KAAKE;;;;;;;;;;;QAEb;wBAjBIJ,KACAC,KACAC;;;;;SAiBGoB;mBAAe,kBAAA,SAClBtB,KACAC,KACAC,MACC;gBAESS,UACAY,kBAODnB;;;;;;;;;;wBARCO,WAAmBX,IAAIa,MAAM,CAACC,EAAE;wBAElC;;4BAAM,OAAKhB,aAAa,CAACwB,YAAY,CAACX;;;wBADpCY,mBACF;wBAEJtB,IAAIK,MAAM,CAAC,KAAKC,IAAI,CAAC;4BACjBC,MAAMe;4BACNd,SAAS;wBACb;;;;;;wBACKL;wBACLF,KAAKE;;;;;;;;;;;QAEb;wBAhBIJ,KACAC,KACAC;;;;;AAiBR,eAAeL,iBAAiB"}