{
    "version": 3,
    "sources": [
        "../../src/services/users.service.ts"
    ],
    "sourcesContent": [
        "import { hash } from 'bcrypt';\r\nimport { CreateUserDto } from '@dtos/users.dto';\r\nimport { HttpException } from '@exceptions/HttpException';\r\nimport { User } from '@interfaces/users.interface';\r\nimport userModel from '@models/users.model';\r\nimport { isEmpty } from '@utils/util';\r\n\r\nclass UserService {\r\n    public users = userModel;\r\n\r\n    public async findAllUser(): Promise<User[]> {\r\n        const users: User[] = await this.users.findAll();\r\n        return users;\r\n    }\r\n\r\n    public async findUserById(userId: string): Promise<User> {\r\n        if (isEmpty(userId)) throw new HttpException(400, 'UserId is empty');\r\n\r\n        const findUser: User = await this.users.findOne({\r\n             id: userId \r\n        });\r\n        if (!findUser) throw new HttpException(409, \"User doesn't exist\");\r\n\r\n        return findUser;\r\n    }\r\n\r\n    public async createUser(userData: CreateUserDto): Promise<User> {\r\n        if (isEmpty(userData))\r\n            throw new HttpException(400, 'userData is empty');\r\n\r\n        const findUser: User = await this.users.findOne({\r\n             email: userData.email \r\n        });\r\n        if (findUser)\r\n            throw new HttpException(\r\n                409,\r\n                `This email ${userData.email} already exists`\r\n            );\r\n\r\n        const hashedPassword = await hash(userData.password, 10);\r\n        const createUserData: User = await this.users.create({\r\n            ...userData,\r\n            password: hashedPassword,\r\n        });\r\n\r\n        return createUserData;\r\n    }\r\n\r\n    public async updateUser(\r\n        userId: string,\r\n        userData: CreateUserDto\r\n    ): Promise<User> {\r\n        if (isEmpty(userData))\r\n            throw new HttpException(400, 'userData is empty');\r\n\r\n        if (userData.email) {\r\n            const findUser: User = await this.users.findOne({\r\n                 email: userData.email \r\n            });\r\n            if (findUser && findUser.id != userId)\r\n                throw new HttpException(\r\n                    409,\r\n                    `This email ${userData.email} already exists`\r\n                );\r\n        }\r\n\r\n        if (userData.password) {\r\n            const hashedPassword = await hash(userData.password, 10);\r\n            userData = { ...userData, password: hashedPassword };\r\n        }\r\n\r\n        const updateUserById: User = await this.users.findOne({\r\n             id: userId \r\n        });\r\n        if (!updateUserById) throw new HttpException(409, \"User doesn't exist\");\r\n\r\n        await this.users.update(userData, {  id: userId } });\r\n\r\n        return updateUserById;\r\n    }\r\n\r\n    public async deleteUser(userId: string): Promise<User> {\r\n        const deleteUserById: User = await this.users.findOne({\r\n            where: { id: userId \r\n        });\r\n        if (!deleteUserById) throw new HttpException(409, \"User doesn't exist\");\r\n\r\n        await this.users.destroy({\r\n             id: userId \r\n        });\r\n        return deleteUserById;\r\n    }\r\n}\r\n\r\nexport default UserService;\r\n"
    ],
    "names": [
        "hash",
        "HttpException",
        "userModel",
        "isEmpty",
        "UserService",
        "users",
        "findAllUser",
        "findAll",
        "findUserById",
        "userId",
        "findUser",
        "findOne",
        "where",
        "id",
        "createUser",
        "userData",
        "hashedPassword",
        "createUserData",
        "email",
        "password",
        "create",
        "updateUser",
        "updateUserById",
        "update",
        "deleteUser",
        "deleteUserById",
        "destroy"
    ],
    "mappings": "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"
}
