{"version":3,"sources":["../../src/services/server.service.ts"],"sourcesContent":["import { CreateServerDto } from '../dtos/servers.dto';\r\nimport { Server } from '../interfaces/server.interface';\r\n\r\nimport serverModel from '../models/servers.model';\r\nimport { HttpException } from '@exceptions/HttpException';\r\nimport { isEmpty } from '@utils/util';\r\n\r\nclass Serverservice {\r\n    public servers = serverModel;\r\n\r\n    public async findAllServer(): Promise<Server[]> {\r\n        const servers: Server[] = await this.servers.findAll();\r\n        return servers;\r\n    }\r\n\r\n    public async findServerById(serverId: string): Promise<Server> {\r\n        const findServer: Server = await this.servers.findOne({\r\n            where: { id: serverId },\r\n        });\r\n        if (!findServer) throw new HttpException(409, \"Server doesn't exist\");\r\n\r\n        return findServer;\r\n    }\r\n\r\n    public async createServer(serverData: CreateServerDto): Promise<Server> {\r\n        if (isEmpty(serverData))\r\n            throw new HttpException(400, \"You're not serverData\");\r\n\r\n        const createServerData: Server = await this.servers.create({\r\n            ...serverData,\r\n        });\r\n\r\n        return createServerData;\r\n    }\r\n\r\n    public async updateServer(\r\n        serverId: string,\r\n        serverData: CreateServerDto\r\n    ): Promise<Server> {\r\n        if (isEmpty(serverData))\r\n            throw new HttpException(400, \"You're not serverData\");\r\n\r\n        if (serverData.name) {\r\n            const findServer: Server = await this.servers.findOne({\r\n                where: { name: serverData.name },\r\n            });\r\n            if (findServer && findServer.id != serverId)\r\n                throw new HttpException(\r\n                    409,\r\n                    `This name ${serverData.name} already exists`\r\n                );\r\n        }\r\n\r\n        await this.servers.update(serverData, { where: { id: serverId } });\r\n\r\n        const updateServer: Server = await this.servers.findOne({\r\n            where: { id: serverId },\r\n        });\r\n\r\n        return updateServer;\r\n    }\r\n\r\n    public async deleteServer(serverId: string): Promise<Server> {\r\n        const findServer: Server = await this.servers.findOne({\r\n            where: { id: serverId },\r\n        });\r\n        if (!findServer) throw new HttpException(409, \"Server doesn't exist\");\r\n\r\n        await this.servers.destroy({ where: { id: serverId } });\r\n\r\n        return findServer;\r\n    }\r\n}\r\n\r\nexport default Serverservice;\r\n"],"names":["serverModel","HttpException","isEmpty","Serverservice","servers","findAllServer","findAll","findServerById","serverId","findServer","findOne","where","id","createServer","serverData","createServerData","create","updateServer","name","update","deleteServer","destroy"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA,OAAOA,iBAAiB,0BAA0B;AAClD,SAASC,aAAa,QAAQ,4BAA4B;AAC1D,SAASC,OAAO,QAAQ,cAAc;AAEtC,IAAA,AAAMC,8BAmEL,AAnED;;aAAMA;8BAAAA;aACKC,UAAUJ;;iBADfG;IAGF,OAAaE,aAGZ,GAHD,SAAaA;;eAAb,kBAAA,WAAgD;gBACtCD;;;;wBAAoB;;4BAAM,MAAKA,OAAO,CAACE,OAAO;;;wBAA9CF,UAAoB;wBAC1B;;4BAAOA;;;;QACX;;IAEA,OAAaG,cAOZ,GAPD,SAAaA,eAAeC,QAAgB;;eAA5C,kBAAA,WAA+D;gBACrDC;;;;wBAAqB;;4BAAM,MAAKL,OAAO,CAACM,OAAO,CAAC;gCAClDC,OAAO;oCAAEC,IAAIJ;gCAAS;4BAC1B;;;wBAFMC,aAAqB;wBAG3B,IAAI,CAACA,YAAY,MAAM,IAAIR,cAAc,KAAK,wBAAwB;wBAEtE;;4BAAOQ;;;;QACX;;IAEA,OAAaI,YASZ,GATD,SAAaA,aAAaC,UAA2B;;eAArD,kBAAA,WAAwE;gBAI9DC;;;;wBAHN,IAAIb,QAAQY,aACR,MAAM,IAAIb,cAAc,KAAK,yBAAyB;wBAEzB;;4BAAM,MAAKG,OAAO,CAACY,MAAM,CAAC,kBACpDF;;;wBADDC,mBAA2B;wBAIjC;;4BAAOA;;;;QACX;;IAEA,OAAaE,YAyBZ,GAzBD,SAAaA,aACTT,QAAgB,EAChBM,UAA2B;;eAF/B,kBAAA,WAGmB;gBAKLL,YAYJQ;;;;wBAhBN,IAAIf,QAAQY,aACR,MAAM,IAAIb,cAAc,KAAK,yBAAyB;6BAEtDa,WAAWI,IAAI,EAAfJ;;;;wBAC2B;;4BAAM,MAAKV,OAAO,CAACM,OAAO,CAAC;gCAClDC,OAAO;oCAAEO,MAAMJ,WAAWI,IAAI;gCAAC;4BACnC;;;wBAFMT,aAAqB;wBAG3B,IAAIA,cAAcA,WAAWG,EAAE,IAAIJ,UAC/B,MAAM,IAAIP,cACN,KACA,AAAC,aAA4B,OAAhBa,WAAWI,IAAI,EAAC,oBAC/B;;;wBAGV;;4BAAM,MAAKd,OAAO,CAACe,MAAM,CAACL,YAAY;gCAAEH,OAAO;oCAAEC,IAAIJ;gCAAS;4BAAE;;;wBAAhE;wBAE6B;;4BAAM,MAAKJ,OAAO,CAACM,OAAO,CAAC;gCACpDC,OAAO;oCAAEC,IAAIJ;gCAAS;4BAC1B;;;wBAFMS,eAAuB;wBAI7B;;4BAAOA;;;;QACX;;IAEA,OAAaG,YASZ,GATD,SAAaA,aAAaZ,QAAgB;;eAA1C,kBAAA,WAA6D;gBACnDC;;;;wBAAqB;;4BAAM,MAAKL,OAAO,CAACM,OAAO,CAAC;gCAClDC,OAAO;oCAAEC,IAAIJ;gCAAS;4BAC1B;;;wBAFMC,aAAqB;wBAG3B,IAAI,CAACA,YAAY,MAAM,IAAIR,cAAc,KAAK,wBAAwB;wBAEtE;;4BAAM,MAAKG,OAAO,CAACiB,OAAO,CAAC;gCAAEV,OAAO;oCAAEC,IAAIJ;gCAAS;4BAAE;;;wBAArD;wBAEA;;4BAAOC;;;;QACX;;WAhEEN;;AAmEN,eAAeA,cAAc"}